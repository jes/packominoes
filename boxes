#!/usr/bin/perl

use strict;
use warnings;

use List::Util qw(min max);

my $hstep = 2;
my $vstep = 1;
my $mincells = 20;
my $clearance = 0.2; # a 4x6 outer-box is considered to be 4.2x6.2 for the purposes of fitting the inner boxes?
my $minw = 4;
my $minh = 4;

my %seen;

my $stepsize = 0.5;
for (my $tlx = 0; $tlx < 10; $tlx += $stepsize) {
    for (my $tly = 0; $tly < 10; $tly += $stepsize) {
        for (my $w = $minw; $w < $mincells; $w += $stepsize) {
            for (my $h = max($mincells/$w,$minh); $h < $mincells; $h += $stepsize) {
                my $skewedbox = simplify(skewed($tlx,$tly,$w-$clearance,$h-$clearance,$hstep,$vstep));
                my $cells =()= $skewedbox =~ / /g;
                if ($cells >= $mincells) {
                    print "($w,$h: $cells)\n$skewedbox\n\n" if !$seen{$skewedbox}++ && $cells==$mincells;
                    last;
                }
            }
        }
    }
}

sub skewed {
    my ($tlx, $tly, $w, $h, $hstep, $vstep) = @_;

    my $angle = atan2($vstep,$hstep);

    my $trx = $tlx + cos($angle)*$w;
    my $try = $tly + sin($angle)*$w;
    my $blx = $tlx - sin($angle)*$h;
    my $bly = $tly + cos($angle)*$h;
    my $brx = $trx-($tlx-$blx);
    my $bry = $try+($bly-$tly);

    my $minx = $blx;
    my $miny = $tly;
    my $maxx = $trx;
    my $maxy = $bry;

    # https://stackoverflow.com/a/3461533
    my $is_left = sub {
        my ($x1,$y1,$x2,$y2, $x,$y) = @_;
        return (($x2-$x1)*($y-$y1) - ($y2-$y1)*($x-$x1)) > 0;
    };

    my $point_inside = sub {
        my ($x,$y) = @_;
        my @lines = ([$trx,$try,$tlx,$tly], [$tlx,$tly,$blx,$bly], [$blx,$bly,$brx,$bry], [$brx,$bry,$trx,$try]);
        # if the point is to the right of all 4 lines, then the point is inside the box
        for my $l (@lines) {
            return 0 if $is_left->(@$l, $x,$y);
        }
        return 1;
    };

    my $cell_inside = sub {
        my ($x,$y) = @_;
        # if all 4 points of this cell are inside, then the cell is inside
        my @points = ([$x,$y], [$x+1,$y], [$x,$y+1], [$x+1,$y+1]);
        for my $p (@points) {
            my ($x,$y) = @$p;
            return 0 if !$point_inside->($x,$y);
        }
        return 1;
    };

    my $str = '';
    for my $y ($miny..$maxy) {
        for my $x ($minx..$maxx) {
            $str .= $cell_inside->($x,$y) ? ' ' : '#';
        }
        $str .= "\n";
    }
    return $str;
}

sub transpose {
    my ($str) = @_;
    my @lines = split /\n/, $str;
    my $out = '';
    for my $y (0..length($lines[0])-1) {
        for my $x (0..$#lines) {
            $out .= substr($lines[$x], $y, 1);
        }
        $out .= "\n";
    }
    return $out;
}

sub simplify {
    my ($str) = @_;

    # delete lines that are all hashes
    $str =~ s/^#*\n//mg;

    # delete columns that are all hashes
    $str = transpose($str);
    $str =~ s/^#*\n//mg;
    $str = transpose($str);

    return $str;
}
